




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DBConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Database=ZibicoLive;Data Source=.;Trusted_Connection=true;MultipleActiveResultSets=true;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace ZibicoLive.Entity.Models
{

	public partial class ZibicoLive : Database
	{
		public ZibicoLive() 
			: base("DBConnection")
		{
			CommonConstruct();
		}

		public ZibicoLive(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			ZibicoLive GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static ZibicoLive GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new ZibicoLive();
        }

		[ThreadStatic] static ZibicoLive _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static ZibicoLive repo { get { return ZibicoLive.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.ConnectionUsers")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class ConnectionUserPOCO : ZibicoLive.Record<ConnectionUserPOCO>  
    {



		[Column] public long ID { get; set; }





		[Column] public string ConnectionId { get; set; }





		[Column] public Guid? UniqueId { get; set; }





		[Column] public string IPAddress { get; set; }





		[Column] public string SessionKey { get; set; }





		[Column] public string Username { get; set; }



	}

    

	[TableName("dbo.GeneralSettings")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class GeneralSettingPOCO : ZibicoLive.Record<GeneralSettingPOCO>  
    {



		[Column] public int ID { get; set; }





		[Column] public string SettingKey { get; set; }





		[Column] public string DisplayName { get; set; }





		[Column] public string SettingValue { get; set; }





		[Column] public string Description { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.StepOptions")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class StepOptionPOCO : ZibicoLive.Record<StepOptionPOCO>  
    {



		[Column] public long ID { get; set; }





		[Column] public Guid? UniqueId { get; set; }





		[Column] public int WebSiteId { get; set; }





		[Column] public long StepID { get; set; }





		[Column] public long? NextStepID { get; set; }





		[Column] public string OptionDescription { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.StepOptionValues")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class StepOptionValuePOCO : ZibicoLive.Record<StepOptionValuePOCO>  
    {



		[Column] public long ID { get; set; }





		[Column] public Guid? UniqueId { get; set; }





		[Column] public int WebSiteId { get; set; }





		[Column] public long StepID { get; set; }





		[Column] public long OptionID { get; set; }





		[Column] public Guid? GroupKey { get; set; }





		[Column] public string SessionKey { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.Steps")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class StepPOCO : ZibicoLive.Record<StepPOCO>  
    {



		[Column] public long ID { get; set; }





		[Column] public Guid? UniqueId { get; set; }





		[Column] public int WebSiteId { get; set; }





		[Column] public int StepNumber { get; set; }





		[Column] public string Question { get; set; }





		[Column] public bool? IsFinished { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.Users")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class UserPOCO : ZibicoLive.Record<UserPOCO>  
    {



		[Column] public long ID { get; set; }





		[Column] public Guid? UniqueID { get; set; }





		[Column] public int WebSiteID { get; set; }





		[Column] public int RoleTypeID { get; set; }





		[Column] public string Username { get; set; }





		[Column] public string Password { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}

    

	[TableName("dbo.WebSites")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class WebSitePOCO : ZibicoLive.Record<WebSitePOCO>  
    {



		[Column] public int ID { get; set; }





		[Column] public int UserID { get; set; }





		[Column] public Guid? UniqueID { get; set; }





		[Column] public string WebSiteDomain { get; set; }





		[Column] public DateTime? CreatedDate { get; set; }





		[Column] public int? Status { get; set; }



	}


}
